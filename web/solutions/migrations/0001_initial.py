# Generated by Django 4.0.4 on 2022-05-05 09:03

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import solutions.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Необходимо повторить или изучить')),
                ('task', models.CharField(max_length=50, verbose_name='Номер задачи для повторения')),
            ],
            options={
                'verbose_name': 'Рекомендация',
                'verbose_name_plural': 'Рекомендации',
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('github_url', models.CharField(max_length=200, validators=[solutions.validators.github_url_validator], verbose_name='URL GitHub репозитория')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solutions', to=settings.AUTH_USER_MODEL, verbose_name='Автор решения')),
            ],
            options={
                'verbose_name': 'Решение',
                'verbose_name_plural': 'Решения',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SolutionTesting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('dynamic_test_task_id', models.CharField(max_length=100, verbose_name='ID задачи динамического тестирования')),
                ('static_test_task_id', models.CharField(max_length=100, verbose_name='ID задачи статического тестирования')),
                ('status', models.CharField(max_length=20, verbose_name='Статус выполнения задач')),
                ('solution', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='celery_task', to='solutions.solution', verbose_name='Решение')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='celery_tasks', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Задача Celery на тестирование',
                'verbose_name_plural': 'Задачи Celery на тестирования',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningOutcome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название образовательного результата')),
                ('score', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(5)], verbose_name='Уровень')),
                ('recommendations', models.ManyToManyField(related_name='learning_outcomes', to='solutions.recommendation', verbose_name='Рекомендации к образовательному результату решения')),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_outcomes', to='solutions.solution', verbose_name='Решение')),
            ],
            options={
                'verbose_name': 'Образовательный результат решения',
                'verbose_name_plural': 'Образовательные результаты решений',
            },
        ),
    ]
